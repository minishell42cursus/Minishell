#include "minishell.h"


void	new_node(t_nod **nod, char *name, char *value)
{


void	add_to_local_env(char *name, char *value)
{
	t_var	**nod;
	t_var	*save;
	t_var	*nod2;
	int		assigned;

	assigned = 0;
	save = g_shell->envar;
	nod = &g_shell->envar;
	while (*nod && assigned == 0)
	{
		if (!ft_strncmp((*nod)->name, name, ft_maxlen((*nod)->name, name)))
		{
			free(name);
			free((*nod)->value);
			(*nod)->value = value;
			assigned = 1;
		}
		(*nod) = (*nod)->next;

	}
	if (assigned == 0)
	{
		new_node(nod, name, value);
		(*nod) = malloc(sizeof(t_var));
		(*nod)->name = name;
		(*nod)->value = value;
		(*nod)->next = NULL;
	}
	g_shell->envar = save;
	nod2 = g_shell->envar;
	while (nod2)
	{
		printf("pointer: %p\nname: [%s]\nvalue:[%s]\n\n", nod2, nod2->name, nod2->value);
		nod2 = nod2->next;
	}
}

/* Function that will clear the local environment variable
 * declaration from the command matrix, resizing it correctly.
 * Example: [a="hello ls] will be just [ls] after assigning a.*/
static void	rebuild_cmd(char ***cmd)
{
	char	**aux;
	char	**new_cmd;
	int		i;

	new_cmd = malloc(sizeof(char *) * ft_matrixlen(*cmd));
	aux = *cmd;
	i = 1;
	while (aux[i])
	{
		new_cmd[i - 1] = ft_strdup(aux[i]);
		i++;
	}
	new_cmd[i - 1] = NULL;
	free_matrix(*cmd);
	*cmd = new_cmd;
}

int	check_if_def(char *str)
{
	if (!str)
		return (0);
	if (ft_isvalid_env_start(*str))
	{
		while (ft_isvalid_env_core(*str))
			str++;
		if (*str == '=')
			return (1);
	}
	return (0);
}

void	clear_envar_defs(char ***cmd)
{
	char	**aux;
	char	*aux2;
	char	*name;
	char	*value;

	aux = *cmd;
	aux2 = NULL;
	if (check_if_def(*aux) == OK)
	{
		aux2 = *aux;
		name = get_var_name(aux2);
		aux2 = aux2 + ft_strlen(name) + 1;
		value = ft_strdup(aux2);
		add_to_local_env(name, value);
		rebuild_cmd(cmd);
		clear_envar_defs(cmd);
	}
}
